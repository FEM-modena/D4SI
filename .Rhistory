stat = "bin",
position = "stack",
binwidth = NULL,
bins = NULL,
na.rm = FALSE,
orientation = NA,
show.legend = NA,
inherit.aes = TRUE
)
geom_histogram(
mapping = NULL,
data = spotify_songs,
stat = "bin",
position = "stack"
)
geom_histogram(
mapping = track_popularity,
data = spotify_songs,
stat = "bin",
position = "stack"
)
geom_histogram(
mapping = spotify_songs$track_popularity,
data = spotify_songs,
stat = "bin",
position = "stack"
)
ggplot(spotify_songs, aes(track_popularity))
ggplot(spotify_songs, aes(track_popularity))+
geom_histogram(binwidth = 500)
ggplot(spotify_songs, aes(track_popularity))+
geom_histogram(binwidth = 110)
ggplot(spotify_songs, aes(track_popularity))+
geom_histogram(binwidth = 10)
ggplot(spotify_songs, aes(track_popularity))+
geom_histogram(binwidth = 1)
spotify_songs %>%
filter(species_id == "Ed Sheeran") %>%
ggplot(aes(track_popularity))+
geom_histogram(binwidth = 1)+
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran") %>%
ggplot(aes(track_popularity))+
geom_histogram(binwidth = 1)+
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | "Dua Lipa") %>%
ggplot(aes(track_popularity))+
geom_histogram(binwidth = 1)+
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity))+
geom_histogram(binwidth = 1)+
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa', fill = track_artist) %>%
ggplot(aes(track_popularity))+
geom_histogram(binwidth = 1)+
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity, fill = track_artist))+
geom_histogram(binwidth = 1)+
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity, fill = track_artist))+
geom_histogram(binwidth = 2)+
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity, fill = track_artist))+
geom_histogram(binwidth = 2, alpha = 0.2)+
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity, fill = track_artist))+
geom_histogram(binwidth = 2, alpha = 0.6)+
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity, fill = track_artist))+
geom_histogram(binwidth = 2, alpha = 0.6)+
geom_histogram(data=subset(track_artist == "Ed Sheeran"),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(track_artist=="Dua Lipa"),fill = "blue", alpha = 0.2) +
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity, fill = track_artist))+
geom_histogram(binwidth = 2, alpha = 0.6)+
geom_histogram(track_artist == "Ed Sheeran"),fill = "red", alpha = 0.2) +
geom_histogram(track_artist=="Dua Lipa"),fill = "blue", alpha = 0.2) +
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity, fill = track_artist))+
geom_histogram(binwidth = 2, alpha = 0.6)+
geom_histogram(track_artist == "Ed Sheeran"),fill = "red", alpha = 0.2) +
geom_histogram(track_artist=="Dua Lipa"),fill = "blue", alpha = 0.2) +
write.csv(x,"/Users/lorenzoandreoli/Downloads/spotify_songs.csv", row.names = FALSE)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity, fill = track_artist))+
geom_histogram(binwidth = 2, alpha = 0.6)+
geom_histogram(track_artist == "Ed Sheeran"),fill = "red", alpha = 0.2) +
geom_histogram(track_artist=="Dua Lipa"),fill = "blue", alpha = 0.2)
spotify_songs %>%
filter(track_artist == "Ed Sheeran" | track_artist=='Dua Lipa') %>%
ggplot(aes(track_popularity, fill = track_artist))+
geom_histogram(track_artist == "Ed Sheeran"),fill = "red", alpha = 0.2) +
geom_histogram(track_artist=="Dua Lipa"), fill = "blue", alpha = 0.2)
install.packages("spotifyr")
library(spotifyr)
install.packages('spotifyr')
devtools::install_github('charlie86/spotifyr')
library(spotifyr)
2*2
3+3
# come calcolatrice
3+3
7/7
# displ-hwy
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
library(tidyverse)
# displ-hwy
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
library(rvest)
library(tidyverse)
# displ-hwy
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
install.packages("tidyverse")
library(tidyverse)
# displ-hwy
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
library(tidyverse)
# displ-hwy
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
install.packages("tidyverse")
library(tidyverse)
# displ-hwy
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
mpg
view(mpg)
names(mpg)
ggplot(mpg) + geom_point(aes(x = displ, y = hwy, color = manufacturer))
ggplot(mpg) + geom_point(aes(x = displ, y = hwy, color = manufacturer, size = class))
ggplot(mpg) + geom_line(aes(x = displ, y = hwy, size = class))
ggplot(mpg) + geom_line(aes(x = displ, y = hwy))
ggplot(mpg) + geom_smooth(aes(x = displ, y = hwy))
ggplot(mpg) + geom_point(aes(class, hwy))
ggplot(mpg) + geom_boxplot(aes(class, hwy))
# caricare le "app" di Rstudio
library(tidyverse)
install.packages("tidyverse")
2+2
library(tidyverse)
# Capire il dataset
mpg
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
# Capire il dataset
mpg
library(tidyverse)
##Capire il dataset
# queste funzioni possono essere molto utili per capire il dataset e le variabili
head(mpg)
summary(mpg)
view(mpg)
names(mpg)
## Tocca a te 1
#Esegui il codice sulla diapositiva per creare un grafico. Fai molta attenzione a ortografia, lettere maiuscole e parentesi!
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
## Tocca a te 1
#Esegui il codice sulla diapositiva per creare un grafico. Fai molta attenzione a ortografia, lettere maiuscole e parentesi!
ggplot(data= mpg) +
geom_point(mapping = aes(x =displ, y = hwy))
## Tocca a te 1
#Esegui il codice sulla diapositiva per creare un grafico. Fai molta attenzione a ortografia, lettere maiuscole e parentesi!
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy))
## Tocca a te 2
# Aggiungi l'estetica di `color`,` size`, `alpha` e `shape` al tuo grafico. Sperimentate.
ggplot(mpg) + geom_point(aes(x = displ, y = hwy, color = class))
ggplot(mpg) + geom_point(aes(x = displ, y = hwy, size = class))
ggplot(mpg) + geom_point(aes(x = displ, y = hwy, shape = class))
ggplot(mpg) + geom_point(aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_jitter(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_text(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
install.packages("learnr")
install.packages("rcartocolor")
install.packages("ggsci")
install.packages("extrafont")
meteorites <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-11/meteorites.csv")
ggplot(data = meteorites)+ geom_histogram(mapping = aes(x = mass, fill = class), binwidth=20)
library(tidyverse)
ggplot(data = meteorites)+ geom_histogram(mapping = aes(x = mass, fill = class), binwidth=20)
ggplot(data = meteorites)+ geom_histogram(mapping = aes(x = mass), binwidth=20)
install.packages("devtools")
devtools::install_github("statsbomb/StatsBombR")
devtools::install_github("FCrSTATS/SBpitch")
library(tidyverse)
library(SBpitch)
Comp<-FreeCompetitions()
library(StatsBombR)
library(SBpitch)
library(tidyverse)
devtools::install_github("statsbomb/StatsBombR")
devtools::install_github("FCrSTATS/SBpitch", force = TRUE)
devtools::install_github("statsbomb/StatsBombR", force = TRUE)
library(StatsBombR)
install.packages("dplyr")
library(tidyverse)
library(StatsBombR)
library(SBpitch)
Comp<-FreeCompetitions()
View(Comp)
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==16, season_name=="2018/2019")
View(Comp)
# carichiamo le partite
Matches<-FreeMatches(Comp)
View(Matches)
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==16, season_name=="2018/2019")
# carichiamo le partite
Matches<-FreeMatches(Comp)
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==16, season_name=="2017/2018")
# carichiamo le partite
Matches<-FreeMatches(Comp)
# tutte i dati con le competizioni disponibili
Comp<-FreeCompetitions()
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==16, season_name=="2017/2018")
# carichiamo le partite
Matches<-FreeMatches(Comp)
# tutte i dati con le competizioni disponibili
Comp<-FreeCompetitions()
# tutte i dati con le competizioni disponibili
Comp<-FreeCompetitions()
StatsBombData <- StatsBombFreeEvents()
h
#tutti i dati disponibili gratuitamente
StatsBombData <- StatsBombFreeEvents()
# tutte i dati con le competizioni disponibili
Comp<-FreeCompetitions()
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==16, season_name=="2017/2018")
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==16, season_name=="2016/2017")
View(Comp)
# tutte i dati con le competizioni disponibili
Comp<-FreeCompetitions()
View(Comp)
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==11, season_name=="2019/2020")
# carichiamo le partite
Matches<-FreeMatches(Comp)
View(Matches)
# tutte i dati con le competizioni disponibili
Comp<-FreeCompetitions()
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==11, season_name=="2018/2019")
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==11, season_name=="2019/2020")
# carichiamo le partite
Matches<-FreeMatches(Comp)
View(Matches)
StatsBombData<-StatsBombFreeEvents(MatchesDF = Matches, Parallel = T)
# puliamo i dati
StatsBombData = allclean(StatsBombData)
View(StatsBombData)
#crea il campo
create_Pitch()
# carichiamo i pacchetti necessari
install.packages("devtools")
# se non caricare dplyr, installatelo e poi library(dplyr)
library(tidyverse)
library(StatsBombR)
library(SBpitch)
# tutte i dati con le competizioni disponibili
Comp<-FreeCompetitions()
# filtriamo per la competizione che ci interessa
Comp<-FreeCompetitions()%>%
filter(competition_id==11, season_name=="2019/2020")
# carichiamo le partite (ci mette tanto)
Matches<-FreeMatches(Comp)
StatsBombData<-StatsBombFreeEvents(MatchesDF = Matches, Parallel = T)
# puliamo i dati
StatsBombData = allclean(StatsBombData)
View(StatsBombData)
View(Matches)
# filtra per una singola partita
d1<-StatsBombData%>%
filter(match_id == 303524, type.name == "Pass", team.name == "Atlético Madrid")
View(d1)
#crea il campo
create_Pitch()
View(d1)
# aggiungi i passaggi
names(d1)
geom_point(data = d1, aes(x = location.x, y = location.y))
create_Pitch()+
geom_point(data = d1, aes(x = location.x, y = location.y))
#uniamo i passaggi
geom_point(data = d1, aes(x = location.x, y = location.y))
geom_segment(data = d1, aes(x = location.x, y = location.y, xend = pass.end_location.x, yend = pass.end_location.y))
#uniamo i passaggi
create_Pitch()+
geom_point(data = d1, aes(x = location.x, y = location.y))+
geom_segment(data = d1, aes(x = location.x, y = location.y, xend = pass.end_location.x, yend = pass.end_location.y))
# dove aggiungere "arrow"
create_Pitch()+
geom_point(data = d1, aes(x = location.x, y = location.y))+
geom_segment(data = d1, aes(x = location.x, y = location.y, xend = pass.end_location.x, yend = pass.end_location.y), arrow = arrow(length = unit(0.08,"inches")))
# dove aggiungere "arrow"
create_Pitch()+
geom_point(data = d1, aes(x = location.x, y = location.y))+
geom_segment(data = d1, aes(x = location.x, y = location.y, xend = pass.end_location.x, yend = pass.end_location.y), color = "red", arrow = arrow(length = unit(0.08,"inches")))
# dove aggiungere "arrow"
create_Pitch()+
geom_point(data = d1, aes(x = location.x, y = location.y))+
geom_segment(data = d1, aes(x = location.x, y = location.y, xend = pass.end_location.x, yend = pass.end_location.y), color = "red", alpha = 0.5, arrow = arrow(length = unit(0.08,"inches")))
#L'asse y non è corretto nella funzione create_pitch...
#quindi se tracciate i passaggi di un terzino sinistro si vedrà sulla destra.
# aggiungete dopo geomn_segment
create_Pitch()+
geom_point(data = d1, aes(x = location.x, y = location.y))+
geom_segment(data = d1, aes(x = location.x, y = location.y, xend = pass.end_location.x, yend = pass.end_location.y), color = "red", alpha = 0.5, arrow = arrow(length = unit(0.08,"inches")))+
scale_y_reverse()+
#aggiungete i titoli
labs(title = "Aggiungi team 1",
subtitle = "vs team 2")
#L'asse y non è corretto nella funzione create_pitch...
#quindi se tracciate i passaggi di un terzino sinistro si vedrà sulla destra.
# aggiungete dopo geomn_segment
create_Pitch()+
geom_point(data = d1, aes(x = location.x, y = location.y))+
geom_segment(data = d1, aes(x = location.x, y = location.y, xend = pass.end_location.x, yend = pass.end_location.y), color = "red", alpha = 0.5, arrow = arrow(length = unit(0.08,"inches")))+
scale_y_reverse()+
labs(title = "Atletico",
subtitle = "vs Barcelona")
View(Matches)
View(StatsBombData)
View(d1)
d1<-StatsBombData%>%
filter(match_id == 303524, type.name == “Pass”, team.name == “Atlético Madrid”, player.name == “João Félix Sequeira”)
filter(match_id == 303524, type.name == “Pass”, team.name == “Atlético Madrid”, player.name == “João FélixSequeira”, type.name == "Pass", team.name == "Atlético Madrid")
# filtra per una singola partita
d1<-StatsBombData%>%
filter(match_id == 303524, type.name == "Pass", team.name == "Atlético Madrid")
View(d1)
d1<-StatsBombData%>%
filter(match_id == 303524, type.name == “Pass”, team.name == “Atlético Madrid”, player.id == 12041)
d1<-StatsBombData%>%
filter(match_id == 303524, type.name == "Pass", team.name == "Atlético Madrid", player.id == 12041)
#L'asse y non è corretto nella funzione create_pitch...
#quindi se tracciate i passaggi di un terzino sinistro si vedrà sulla destra.
# aggiungete dopo geomn_segment
create_Pitch()+
geom_point(data = d1, aes(x = location.x, y = location.y))+
geom_segment(data = d1, aes(x = location.x, y = location.y, xend = pass.end_location.x, yend = pass.end_location.y), color = "red", alpha = 0.5, arrow = arrow(length = unit(0.08,"inches")))+
scale_y_reverse()+
labs(title = "Atletico",
subtitle = "vs Barcelona")
library(babynames)
install.packages("babynames")
library(readr)
babynames <- read_csv("Downloads/babynames.csv",
col_types = cols(year = col_number()))
View(babynames)
library(babynames)
View(babynames)
?comparison
?base::Logic
## Your Turn 1
library(tidyverse)
# Toy datasets to use
pollution <- tribble(
~city,   ~size, ~amount,
"New York", "large",      23,
"New York", "small",      14,
"London", "large",      22,
"London", "small",      16,
"Beijing", "large",      121,
"Beijing", "small",      56
)
# library(babynames)
babynames
setwd("~/Desktop/D4SI/D4SI")
library(readr)
babynames <- read_csv("dataset/babynames.csv")
View(babynames)
install.packages("babynames")
library(tidyverse)
library(babynames)
select(babynames, name:prop)
View(babynames)
select(babynames, -c(year, sex, prop))
select(babynames, name:n)
select(babynames, starts_with("n"))
select(babynames, ends_with("n"))
filter(babynames, name == "Ciao")
filter(babynames, name == "Lorenzo")
filter(babynames, name == "Goku")
filter(babynames, name == "Vegeta")
filter(babynames, name == "Nor")
filter(babynames, name == "Not")
filter(babynames, name == "Pepsi")
View(babynames)
arrange(babynames, n, year == 2000)
arrange(babynames, n)
filter(babynames, year == 2000)+
arrange(babynames, n)
filter(babynames, year == 2000)+
arrange(n)
filter(babynames, year == 2000)+ arrange(n)
babynames%>%
filter(sex == "F", year == 2017) %>%
select(name, n) %>%
arrange(desc(n))
babynames %>%
filter(name == "Beyonce", sex == "F") %>%
select(year, prop) %>%
ggplot()+geom_line(year,prop)
babynames %>%
filter(name == "Beyonce", sex == "F") %>%
select(year, prop)
babynames %>%
filter(name == "Beyonce", sex == "F") %>%
select(year, prop) %>%
ggplot()+
geom_line(year, prop)
babynames %>%
filter(name == "Beyonce", sex == "F") %>%
select(year, prop) %>%
ggplot()+
geom_line(aes(year, prop))
babynames %>%
filter(name == "Beyonce", sex == "F") %>%
select(year, n) %>%
ggplot()
babynames %>%
filter(name == "Beyonce", sex == "F") %>%
select(year, n) %>%
ggplot()+
geom_line(aes(year, n))
babynames %>%
filter(name == "Lorenzo", sex == "M") %>%
select(year, n) %>%
ggplot()+
geom_line(aes(year, n))
babynames %>%
filter(name == "Adolf", sex == "M") %>%
select(year, n) %>%
ggplot()+
geom_line(aes(year, n))
babynames %>%
filter(name == "Joseph", sex == "M") %>%
select(year, n) %>%
ggplot()+
geom_line(aes(year, n))
babynames %>%
filter(name == "Marylin", sex == "M") %>%
select(year, n) %>%
ggplot()+
geom_line(aes(year, n))
babynames %>%
filter(name == "Tom", sex == "M") %>%
select(year, n) %>%
ggplot()+
geom_line(aes(year, n))
babynames %>%
filter(name == "Lorenzo") %>%
select(year, n) %>%
ggplot()+
geom_line(aes(year, n))+
facet_wrap(~ sex)
babynames %>%
filter(name == "Lorenzo") %>%
ggplot() +
geom_line(mapping = aes(year, prop)) +
facet_wrap(~ sex)
babynames %>%
filter(name == "Micheal") %>%
ggplot() +
geom_line(mapping = aes(year, prop)) +
facet_wrap(~ sex)
